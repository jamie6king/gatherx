// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String    // Required for JWT auth
  userType      String    @default("GUEST")
  events        Event[]   @relation("EventHost")
  registrations EventUser[]
  sessionUsers  SessionUser[]
  jobTitle      String?
  industry      String?
  bio           String?
  avatarUrl     String?
  bannerUrl     String?
  useGravatar   Boolean   @default(false)
  tagString     String?   // Store tags as comma-separated string
  notifications String?   // Store JSON as string
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Event {
  id              String         @id @default(uuid())
  name            String
  description     String
  startDate       DateTime
  endDate         DateTime
  startTime       String
  endTime         String
  industry        String
  interestTags    String        // Store as JSON string
  eventType       String
  capacity        Int?
  price           Float?
  location        String
  bannerUrl       String?
  logoUrl         String?
  videoUrl        String?
  website         String?
  socialMediaLinks String        // Store as JSON string
  contactEmail    String?
  contactPhone    String?
  contactName     String?
  hostId          String
  host            User          @relation("EventHost", fields: [hostId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  sessions        EventSession[]
  users           EventUser[]
}

model Tag {
  id          String         @id @default(uuid())
  name        String         @unique
  sessions    EventSession[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime      @updatedAt
}

model EventUser {
  userId    String
  eventId   String
  user      User      @relation(fields: [userId], references: [id])
  event     Event     @relation(fields: [eventId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@id([userId, eventId])
}

model SessionUser {
  userId      String
  sessionId   String
  user        User          @relation(fields: [userId], references: [id])
  session     EventSession  @relation(fields: [sessionId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@id([userId, sessionId])
}

model EventSession {
  id          String        @id @default(uuid())
  title       String
  description String
  speaker     String
  startTime   DateTime
  endTime     DateTime
  format      String
  eventId     String
  event       Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tags        Tag[]
  attendees   SessionUser[]
}
